---
description: "Rules related to data types (e.g. null, object, array, or primitives)."
---
rules:
  data-array-missing-item:
    description: Arrays must specify their items.
    incorrect: |-      
      {
        "type": "array"
      }
    incorrect-prism-highlight: ""
    correct: |-
      {
        "type": "array",
        "items": { ... }
      }   
    correct-prism-highlight: "3"
    severity: off
    given:
      - "$..paths.*.*.parameters..[?(@.type == 'array')]"
      - "$..paths.*.parameters..[?(@.type == 'array')]"
      - "$..properties..[?(@.type == 'array')]"
    then:
      field: items
      function: truthy
  data-array-missing-item-type:
    description: Arrays must specify an item type.
    incorrect: |-      
      {
        "type": "array",
        "items": { ... }
      }
    incorrect-prism-highlight: ""
    correct: |-      
      {
        "type": "array",
        "items": {
          "$ref": "./Model.json"
        }
      }
    correct-prism-highlight: "3-5"    
    severity: off
    given:
      - "$..paths.*.*.parameters..[?(@.type == 'array')].items"
      - "$..paths.*.parameters..[?(@.type == 'array')].items"
      - "$..properties..[?(@.type == 'array')].items"
    then:
      function: xor
      functionOptions:
        properties:
          - type
          - '$ref'
  data-missing-description:
    description: Properties and parameters must have a non-empty `description`.
    incorrect: |-      
      {
        "properties": {
          "first_name": { ... }
        }
      }
    incorrect-prism-highlight: ""
    correct: |-      
      {
        "properties": {
          "first_name": {
            "description": "A user's first name"
          }
        }
      }
    correct-prism-highlight: "4"
    severity: off
    given:
      - "$..properties.[?(@.type == 'string'||@.type == 'number'||@.type == 'integer'||@.type == 'boolean'||@.type == 'object')]"
      - "$..parameters[*]"
    then:
      - field: description
        function: truthy
  data-missing-example:
    description: Properties and parameters must have a non-empty `example`.
    incorrect: |-      
      {
        "properties": {
          "street_number": {
            "type": "integer"
          },
          "first_name": {
            "type": "string"
          }
        }
      }
    incorrect-prism-highlight: ""
    correct: |-            
      {
        "properties": {
          "street_number": {
            "type": "integer",
            "example": 108
          },
          "first_name": {
            "type": "string",
            "example": "Jarrod"
          }
        }
      } 
    correct-prism-highlight: "5,9"
    severity: off
    given:
      - "$..properties[?(@.type == 'string'||@.type == 'number'||@.type == 'integer'||@.type == 'boolean')]"
      - "$..parameters[*][?(@.type == 'string'||@.type == 'number'||@.type == 'integer'||@.type == 'boolean')]"
    then:
      - field: example
        function: truthy
  data-not-type-or-ref:
    description: Properties and parameters should specify either a `type` or `$ref`. Composite types are not allowed because they are not supported by most SDK generation tools.
    incorrect: |-      
      {
        "properties": {
          "user": {
            "oneOf": [
              {
                "$ref": "./Admin.json"
              },
              {
                "$ref": "./User.json"
              }
            ]
          }
        }
      }
    incorrect-prism-highlight: "4-11"
    correct: |-
      {
        "properties": {
          "user": {
            "$ref": "./User.json"
          }
        }
      }
    correct-prism-highlight: "4"
    severity: off
    given:
      - '$..properties.*'
      - '$..parameters[*].schema'
    then:
      - function: xor
        functionOptions:
          properties:
            - type
            - $ref
  data-object-missing-additional-prop:
    description: Objects must define `additionalProperties` as true or false. Default to false.
    incorrect: |-      
      {
        "title": "Model",
        "type": "object",
        "properties": { ... }
      }      
    incorrect-prism-highlight: ""
    correct: |-      
      {
        "title": "Model",
        "type": "object",
        "properties": { ... },
        "additionalProperties": false
      }
    correct-prism-highlight: "5"
    severity: off
    given:
      - '$'
      - "$..[?(@.type == 'object')]"
    then:
      - field: additionalProperties
        function: defined
  data-prop-missing-type-and-description:
    description: Properties must have a non-empty `type` and `description`.
    incorrect: |-      
      {
        "properties": {
          "first_name": { ... }
        }
      }
    incorrect-prism-highlight: ""
    correct: |-      
      {
        "properties": {
          "first_name": {
            "type": "string",
            "description": "A user's first name"
          }
        }
      }
    correct-prism-highlight: "4-5"    
    severity: off
    given: "$..properties.[?(@.type == 'string'||@.type == 'number'||@.type == 'integer'||@.type == 'boolean'||@.type == 'object')]"
    then:
      - field: type
        function: truthy
      - field: description
        function: truthy
  data-string-date-not-iso-8601:
    description: Date properties and parameters must be specified in ISO 8601 (yyyy-mm-dd) format.
    incorrect: |-
      {
        "properties": {
          "start_date": {
            "type": "string"
          }
        }
      }
    incorrect-prism-highlight: ""
    correct: |-
      {
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date",
            "example": "2023-01-01",
            "minLength": 10,
            "maxLength": 10
          }
        }
      }
    correct-prism-highlight: "5-8"
    severity: off
    given:
      - "$..properties[?(@.type == 'string'&&@.format == 'date')]"
      - "$..parameters[*][?(@.type == 'string'&&@.format == 'date')]"
    then:
      - field: example
        function: pattern
        functionOptions:
          match: "\\d{4}-\\d{2}-\\d{2}"    
      - field: minLength
        function: length
        functionOptions:
          max: 10
          min: 10
      - field: maxLength
        function: length
        functionOptions:
          max: 10
          min: 10
  data-string-date-time-not-iso-8601:
    description: Date-time properties and parameters must be specified in ISO 8601 (yyyy-MM-ddTHH:mm:ss.fffZ) format. Millisecond precision is provided with 3 decimal digits.
    incorrect: |-
      {
        "properties": {
          "start_time": {
            "type": "string"
          }
        }
      }
    incorrect-prism-highlight: ""
    correct: |-
      {
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T00:00:00.000Z",
            "minLength": 24,
            "maxLength": 24
          }
        }
      }
    correct-prism-highlight: "5-8"
    severity: off
    given:
      - "$..properties[?(@.type == 'string'&&@.format == 'date-time')]"
      - "$..parameters[*][?(@.type == 'string'&&@.format == 'date-time')]"
    then:
      - field: example
        function: pattern
        functionOptions:
          match: "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z"
      - field: minLength
        function: length
        functionOptions:
          max: 24
          min: 24
      - field: maxLength
        function: length
        functionOptions:
          max: 24
          min: 24
  data-string-format-not-known:
    description: String formats must be in set (date,date-time,password,byte,binary,email,uuid,uri,base64,float,double,int32,int64).
    incorrect: |-      
      {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "datetime"
          }
        }
      }
    incorrect-prism-highlight: "5"
    correct: |-      
      {
        "properties": {
          "created_at": {
            "type": "string",          
            "format": "date-time"
          }
        }
      }
    correct-prism-highlight: "5"
    severity: off
    given:
      - '$..format'
    then:
      function: enumeration
      functionOptions:
        values:
          - 'date'
          - 'date-time'
          - 'password'
          - 'byte'
          - 'binary'
          - 'email'
          - 'uuid'
          - 'uri'
          - 'base64'
          - 'float'
          - 'double'
          - 'int32'
          - 'int64'
  data-string-missing-min-max:
    description: String properties and parameters must specify a `minLength` and `maxLength`.
    incorrect: |-      
      {
        "properties": {
          "first_name": {
            "type": "string"
          }
        }
      }
    incorrect-prism-highlight: ""
    correct: |-      
      {
        "properties": {
          "first_name": {
            "type": "string"
            "minLength": 0,
            "maxLength": 255,
          }
        }
      }
    correct-prism-highlight: "5-6"
    severity: off
    given:
      - "$..properties[?(@.type == 'string')]"
      - "$..paths.*.*.parameters.*[?(@.type == 'string')]"
      - "$..paths.*.parameters.*[?(@.type == 'string')]"
    then:
      - field: minLength
        function: defined
      - field: maxLength
        function: truthy